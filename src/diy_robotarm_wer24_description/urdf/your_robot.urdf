<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from diy_robotarm_main.urdf.xacro   | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!--this is the main urdf.xacro file which builds actually the robot model by calling the other macros-->
<robot name="wer24_robotarm">
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="yellow">
    <color rgba="1.0 1.0 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.6 0.6 0.6 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.4235294117647059 0.0392156862745098 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.8705882352941177 0.8117647058823529 0.7647058823529411 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <!--#######################################################################################################################################-->
  <!--set some parameters with default values used by the macros (kinematics description, simulation and control)-->
  <!--#######################################################################################################################################-->
  <!--still to modify delete not necessary params *** only use fake hardware should be available???-->
  <!--#######################################################################################################################################-->
  <!-- call the main macro by passing above instanced parameters to build the arm -->
  <!--#######################################################################################################################################-->
  <!-- create link fixed to the "world" -->
  <link name="world"/>
  <!--#######################################################################################################################################-->
  <!--include ros2 control and create an instance if param generate_ros2_control_tag == true and pass necessary params-->
  <!--#######################################################################################################################################-->
  <!--still to modify delete not necessary params-->
  <!--#######################################################################################################################################-->
  <!--build ros2_control configuration-->
  <!--#######################################################################################################################################-->
  <ros2_control name="wer24_robotarm" type="system">
    <!--load hardware or simulation plugins-->
    <hardware>
      <plugin>ur_robot_driver/URPositionHardwareInterface</plugin>
      <!--call our custom plugin for interfacing with the esp-->
      <param name="robot_ip">0.0.0.0</param>
      <param name="script_filename"></param>
      <param name="output_recipe_filename"></param>
      <param name="input_recipe_filename"></param>
      <param name="headless_mode">False</param>
      <param name="reverse_port">50001</param>
      <param name="script_sender_port">50002</param>
      <param name="reverse_ip">0.0.0.0</param>
      <param name="script_command_port">50004</param>
      <param name="trajectory_port">50003</param>
      <param name="tf_prefix"></param>
      <param name="non_blocking_read">True</param>
      <param name="keep_alive_count">2</param>
    </hardware>
    <!--define interfaces for each joint-->
    <joint name="shoulder">
      <!--define command interface PcToRobot-->
      <command_interface name="position">
        <param name="min">{-pi}</param>
        <param name="max">{pi}</param>
      </command_interface>
      <!--define state interface RobotToPC (NOTE: our Hardware is an open-loop control system!)-->
      <state_interface name="position">
        <!-- initial position for the FakeSystem and simulation -->
        <param name="initial_value">0</param>
      </state_interface>
    </joint>
    <joint name="upper_arm">
      <command_interface name="position">
        <param name="min">{-*pi}</param>
        <param name="max">{pi}</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the FakeSystem and simulation -->
        <param name="initial_value">0</param>
      </state_interface>
    </joint>
    <joint name="forearm">
      <command_interface name="position">
        <param name="min">{-pi}</param>
        <param name="max">{pi}</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the FakeSystem and simulation -->
        <param name="initial_value">0</param>
      </state_interface>
    </joint>
    <joint name="wrist_1">
      <command_interface name="position">
        <param name="min">{-pi}</param>
        <param name="max">{pi}</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the FakeSystem and simulation -->
        <param name="initial_value">0</param>
      </state_interface>
    </joint>
    <joint name="wrist_2">
      <command_interface name="position">
        <param name="min">{-pi}</param>
        <param name="max">{pi}</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the FakeSystem and simulation -->
        <param name="initial_value">0</param>
      </state_interface>
    </joint>
    <joint name="wrist_3">
      <command_interface name="position">
        <param name="min">{-pi}</param>
        <param name="max">{pi}</param>
      </command_interface>
      <state_interface name="position">
        <!-- initial position for the FakeSystem and simulation -->
        <param name="initial_value">0</param>
      </state_interface>
    </joint>
    <sensor name="tcp_fts_sensor">
      <state_interface name="force.x"/>
      <state_interface name="force.y"/>
      <state_interface name="force.z"/>
      <state_interface name="torque.x"/>
      <state_interface name="torque.y"/>
      <state_interface name="torque.z"/>
    </sensor>
    <!-- NOTE The following are joints used only for testing with fake hardware and will change in the future -->
    <gpio name="speed_scaling">
      <state_interface name="speed_scaling_factor"/>
      <param name="initial_speed_scaling_factor">1</param>
      <command_interface name="target_speed_fraction_cmd"/>
      <command_interface name="target_speed_fraction_async_success"/>
    </gpio>
    <gpio name="payload">
      <command_interface name="mass"/>
      <command_interface name="cog.x"/>
      <command_interface name="cog.y"/>
      <command_interface name="cog.z"/>
      <command_interface name="payload_async_success"/>
    </gpio>
    <gpio name="resend_robot_program">
      <command_interface name="resend_robot_program_cmd"/>
      <command_interface name="resend_robot_program_async_success"/>
    </gpio>
    <gpio name="hand_back_control">
      <command_interface name="hand_back_control_cmd"/>
      <command_interface name="hand_back_control_async_success"/>
    </gpio>
    <gpio name="zero_ftsensor">
      <command_interface name="zero_ftsensor_cmd"/>
      <command_interface name="zero_ftsensor_async_success"/>
    </gpio>
    <gpio name="system_interface">
      <state_interface name="initialized"/>
    </gpio>
  </ros2_control>
  <!--#######################################################################################################################################-->
  <!--define the main kinematic chain with links and joints (using the config-files)-->
  <!--#######################################################################################################################################-->
  <!-- Achse fix Base to parent passed in the main_urdf.xacro-->
  <joint name="robotarm_to_parent" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
  </joint>
  <!-- Link0 = Basecone -->
  <link name="base_link">
    <origin xyz="0 0 0"/>
    <visual>
      <geometry>
        <mesh filename="package://diy_robotarm_wer24_description/meshes/visual/base.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <!-- <collision>
        <origin xyz="0 0 0 rpy = 0 0 0"/>
        <geometry>
          <mesh filename="package://diy_robotarm_wer24_description/meshes/collision/base.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="red"/>
      </collision> -->
  </link>
  <!-- Achse 1 (Base = World)-->
  <joint name="shoulder" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0.10693"/>
    <parent link="base_link"/>
    <child link="link_1"/>
    <axis xyz="0.0 0.0 1.0"/>
    <limit lower="-3.141592653589793" upper="3.141592653589793" velocity="1.0471975511965976"/>
  </joint>
  <!-- Link1 = Shoulder -->
  <link name="link_1">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--this transformations are defined local on this reference set-->
      <geometry>
        <mesh filename="package://diy_robotarm_wer24_description/meshes/visual/link_1.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <!-- <collision>
        <origin xyz="0 0 0 rpy = 0 0 0"/>
        <geometry>
          <mesh filename="package://diy_robotarm_wer24_description/meshes/collision/link_1.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="red"/>
      </collision> -->
  </link>
  <!-- Achse 2 -->
  <joint name="upper_arm" type="revolute">
    <origin rpy="1.57079 0 1.57079" xyz="0.01163 0 0.05732"/>
    <parent link="link_1"/>
    <child link="link_2"/>
    <axis xyz="0.0 0.0 1.0"/>
    <limit lower="-3.141592653589793" upper="3.141592653589793" velocity="1.0471975511965976"/>
  </joint>
  <!-- Link2 = Upper_Arm -->
  <link name="link_2">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://diy_robotarm_wer24_description/meshes/visual/link_2.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <!-- <collision>
        <origin xyz="0 0 0 rpy = 0 0 0"/>
        <geometry>
          <mesh filename="package://diy_robotarm_wer24_description/meshes/collision/link_2.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="red"/>
      </collision> -->
  </link>
  <!-- Achse 3 -->
  <joint name="forearm" type="revolute">
    <origin rpy="0 0 1.57079" xyz="0 0.2032 -0.04911"/>
    <parent link="link_2"/>
    <child link="link_3"/>
    <axis xyz="0.0 0.0 1.0"/>
    <limit lower="-3.141592653589793" upper="3.141592653589793" velocity="1.0471975511965976"/>
  </joint>
  <!-- Link3 = Forearm -->
  <link name="link_3">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://diy_robotarm_wer24_description/meshes/visual/link_3.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <!-- <collision>
        <origin xyz="0 0 0 rpy = 0 0 0"/>
        <geometry>
          <mesh filename="package://diy_robotarm_wer24_description/meshes/collision/link_3.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="red"/>
      </collision> -->
  </link>
  <!-- Achse 4 -->
  <joint name="wrist_1" type="revolute">
    <origin rpy="0 0 0" xyz="0.1778 0 0.0103"/>
    <parent link="link_3"/>
    <child link="link_4"/>
    <axis xyz="0.0 0.0 1.0"/>
    <limit lower="-3.141592653589793" upper="3.141592653589793" velocity="1.0471975511965976"/>
  </joint>
  <!-- Link4 = Wrist 1 -->
  <link name="link_4">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://diy_robotarm_wer24_description/meshes/visual/link_4.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <!-- <collision>
        <origin xyz="0 0 0 rpy = 0 0 0"/>
        <geometry>
          <mesh filename="package://diy_robotarm_wer24_description/meshes/collision/link_4.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="red"/>
      </collision> -->
  </link>
  <!-- Achse 5 -->
  <joint name="wrist_2" type="revolute">
    <origin rpy="-1.57079 0 -1.57079" xyz="0.03095 0 0.02667"/>
    <parent link="link_4"/>
    <child link="link_5"/>
    <axis xyz="0.0 0.0 1.0"/>
    <limit lower="-3.141592653589793" upper="3.141592653589793" velocity="1.0471975511965976"/>
  </joint>
  <!-- Link5 = Wrist 2 -->
  <link name="link_5">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://diy_robotarm_wer24_description/meshes/visual/link_5.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <!-- <collision>
        <origin xyz="0 0 0 rpy = 0 0 0"/>
        <geometry>
          <mesh filename="package://diy_robotarm_wer24_description/meshes/collision/link_5.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="red"/>
      </collision> -->
  </link>
  <!-- Achse 6 -->
  <joint name="wrist_3" type="revolute">
    <origin rpy="1.57079 0 0" xyz="0 -0.03146 0.02683"/>
    <parent link="link_5"/>
    <child link="link_6"/>
    <axis xyz="0.0 0.0 1.0"/>
    <limit lower="-3.141592653589793" upper="3.141592653589793" velocity="1.0471975511965976"/>
  </joint>
  <!-- Link6 = Flange -->
  <link name="link_6">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://diy_robotarm_wer24_description/meshes/visual/link_6.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="grey"/>
    </visual>
    <!-- <collision>
        <origin xyz="0 0 0 rpy = 0 0 0"/>
        <geometry>
          <mesh filename="package://diy_robotarm_wer24_description/meshes/collision/link_6.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="red"/>
      </collision> -->
  </link>
</robot>
