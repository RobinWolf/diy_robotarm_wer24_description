<?xml version="1.0"?>

<!--this is the main urdf.xacro file which builds actually the robot model by calling the other macros-->
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="wer24_robotarm">
   <!-- set robot name parameter -->
    <xacro:arg name="name" default="wer24_robotarm"/>

<!--#######################################################################################################################################-->
   <!-- import main macro -->
<!--#######################################################################################################################################-->
    <xacro:include filename="$(find diy_robotarm_wer24_description)/urdf/diy_robotarm_macro.urdf.xacro"/>


<!--#######################################################################################################################################-->
    <!-- set ros2 parameters, which will passsed to the macros-->
<!--#######################################################################################################################################-->
   <!-- set parameters defined in diy_robotarm_macro.xacro -->
    <xacro:arg name="tf_prefix" default=""/>
    <xacro:arg name="joint_limit_params" default="$(find diy_robotarm_wer24_description)/config/joint_limits.yaml"/>
    <xacro:arg name="kinematics_params" default="$(find diy_robotarm_wer24_description)/config/default_kinematics.yaml"/>

    <!-- ros2_control related parameters -->
    <xacro:arg name="headless_mode" default="false" />
    <xacro:arg name="robot_ip" default="0.0.0.0" />
    <xacro:arg name="script_filename" default=""/>
    <xacro:arg name="output_recipe_filename" default=""/>
    <xacro:arg name="input_recipe_filename" default=""/>
    <xacro:arg name="reverse_ip" default="0.0.0.0"/>
    <xacro:arg name="script_command_port" default="50004"/>
    <xacro:arg name="reverse_port" default="50001"/>
    <xacro:arg name="script_sender_port" default="50002"/>
    <xacro:arg name="trajectory_port" default="50003"/>

    <!-- Simulation parameters *************************************************i think we only need use_fake_hardware-->
    <xacro:arg name="use_fake_hardware" default="false" />
    <xacro:arg name="fake_sensor_commands" default="false" />
    <xacro:arg name="sim_gazebo" default="false" />
    <xacro:arg name="sim_ignition" default="false" />
    <xacro:arg name="simulation_controllers" default="" />

    <!-- initial position for simulations from .yaml files (Fake Hardware, Gazebo, Ignition) -->
    <xacro:arg name="initial_positions_file" default="$(find diy_robotarm_wer24_description)/config/initial_positions.yaml"/>
    <!-- convert to property to use substitution in function -->
    <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)"/>


<!--#######################################################################################################################################-->
   <!-- call the main macro by passing above instanced parameters to build the arm -->
<!--#######################################################################################################################################-->
   <!-- create link fixed to the "world" -->
    <link name="world" />

    <xacro:diy_robotarm
        name="$(arg name)"
        tf_prefix="$(arg tf_prefix)"
        parent="world"
        joint_limits_parameters_file="$(arg joint_limit_params)"
        kinematics_parameters_file="$(arg kinematics_params)"
        use_fake_hardware="$(arg use_fake_hardware)"
        fake_sensor_commands="$(arg fake_sensor_commands)"
        sim_gazebo="$(arg sim_gazebo)"
        sim_ignition="$(arg sim_ignition)"
        headless_mode="$(arg headless_mode)"
        initial_positions="${xacro.load_yaml(initial_positions_file)}"
        robot_ip="$(arg robot_ip)"
        script_filename="$(arg script_filename)"
        output_recipe_filename="$(arg output_recipe_filename)"
        input_recipe_filename="$(arg input_recipe_filename)"
        reverse_ip="$(arg reverse_ip)"
        script_command_port="$(arg script_command_port)"
        reverse_port="$(arg reverse_port)"
        script_sender_port="$(arg script_sender_port)"
        trajectory_port="$(arg trajectory_port)"
        >
        <origin xyz="0 0 0" rpy="0 0 0" />          <!-- position robot in the world -->
    </xacro:diy_robotarm>

<!--#######################################################################################################################################-->
    <!--configure gazebo or ignistion simulation if used-->
<!--#######################################################################################################################################-->
    <xacro:if value="$(arg sim_gazebo)">
    <!-- Gazebo plugins -->
        <gazebo reference="world">
        </gazebo>
        <gazebo>
            <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
                <parameters>$(arg simulation_controllers)</parameters>
            </plugin>
        </gazebo>
    </xacro:if>

    <xacro:if value="$(arg sim_ignition)">
    <!-- Gazebo plugins -->
        <gazebo reference="world">
        </gazebo>
        <gazebo>
            <plugin filename="libign_ros2_control-system.so" name="ign_ros2_control::IgnitionROS2ControlPlugin">
                <parameters>$(arg simulation_controllers)</parameters>
            <controller_manager_node_name>$(arg tf_prefix)controller_manager</controller_manager_node_name>
            </plugin>
        </gazebo>
    </xacro:if>


</robot>